package com.formacionviewnext.microservicios.commons.services;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.repository.CrudRepository;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;



@Service
public class AlumnoServiceImpl<E, R extends CrudRepository<E,Long>> implements CommonService<E> {
	
	// Traemos a esta lógica de negocio todo lo referente a los datos del modelo
	@Autowired
	private R repository; 

	@Override
	@Transactional(readOnly=true) // como es una select atributo read only
	public Iterable<E> findAll() {
		// podemos usar el repository con los métodos que nos da JPA
		return repository.findAll();
	}

	@Override
	@Transactional(readOnly=true) // como es una select atributo read only
	public Optional<E> findById(Long id) {
		// podemos usar el repository con los métodos que nos da JPA
		return repository.findById(id);
	}

	@Override
	@Transactional // aqui sin atributo porque lee y modifica
	public E save(E entity) {
		// podemos usar el repository con los métodos que nos da JPA
		return repository.save(entity);
	}

	@Override
	@Transactional // aqui sin atributo porque lee y modifica
	public void deleteById(Long id) {
		// podemos usar el repository con los métodos que nos da JPA
		repository.deleteById(id);

	}

}
